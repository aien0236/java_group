-- MySQL Script generated by MySQL Workbench
-- Fri Mar 15 10:29:22 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema FWRP
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema FWRP
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `FWRP` DEFAULT CHARACTER SET utf8 ;
USE `FWRP` ;

-- -----------------------------------------------------
-- Table `FWRP`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `FWRP`.`user` ;

CREATE TABLE IF NOT EXISTS `FWRP`.`user` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_name` VARCHAR(50) NULL,
  `email` VARCHAR(50) NULL,
  `password` VARCHAR(50) NULL,
  `usertype` VARCHAR(50) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `FWRP`.`consumers_inventory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `FWRP`.`consumers_inventory` ;

CREATE TABLE IF NOT EXISTS `FWRP`.`consumers_inventory` (
  `inventory_id` INT NOT NULL AUTO_INCREMENT,
  `food_name` VARCHAR(50) NULL,
  `expiration_date` VARCHAR(50) NULL,
  `quantity` INT NOT NULL,
  `foodtype` VARCHAR(50) NULL,
  `consumer_id` INT NOT NULL,
  CONSTRAINT FK_consumer_inv_consumer FOREIGN KEY (consumer_id)
  REFERENCES user(id) ON DELETE CASCADE,
  PRIMARY KEY (`inventory_id`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `FWRP`.`consumer_claim_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `FWRP`.`consumer_claim_history` ;

CREATE TABLE IF NOT EXISTS `FWRP`.`consumer_claim_history` (
    `con_claim_id` INT NOT NULL AUTO_INCREMENT,
    `claim_con_inv_id` INT NOT NULL,
    `user_id` INT NOT NULL,
    claimed_time TIMESTAMP DEFAULT NOW(),
    CONSTRAINT FK_con_claim_history_con_inv FOREIGN KEY (claim_con_inv_id)
    REFERENCES consumers_inventory(inventory_id),
    CONSTRAINT FK_con_claim_history_userid FOREIGN KEY (user_id)
    REFERENCES user(id) ON DELETE CASCADE,
    PRIMARY KEY (`con_claim_id`))
    ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `FWRP`.`organization_inventory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `FWRP`.`organization_inventory` ;

CREATE TABLE IF NOT EXISTS `FWRP`.`organization_inventory` (
  `org_inv_id` INT NOT NULL AUTO_INCREMENT,
  `food_name` VARCHAR(50) NULL,
  `expiration_date` VARCHAR(50) NULL,
  `quantity` INT NOT NULL,
  `foodtype` VARCHAR(50) NULL,
  `organization_id` INT NOT NULL,
  CONSTRAINT FK_organization FOREIGN KEY (organization_id)
    REFERENCES user(id) ON DELETE CASCADE,
  PRIMARY KEY (`org_inv_id`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `FWRP`.`organization_claim_history`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `FWRP`.`organization_claim_history` ;

CREATE TABLE IF NOT EXISTS `FWRP`.`organization_claim_history` (
    `org_claim_id` INT NOT NULL AUTO_INCREMENT,
    `claim_org_inv_id` INT NOT NULL,
    `user_id` INT NOT NULL,
    claimed_time TIMESTAMP DEFAULT NOW(),
    CONSTRAINT FK_claim_history_org_inv FOREIGN KEY (claim_org_inv_id)
        REFERENCES organization_inventory(org_inv_id),
    CONSTRAINT FK_claim_history_userid FOREIGN KEY (user_id)
        REFERENCES user(id),
    PRIMARY KEY (`org_claim_id`))
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `FWRP`.`organization_inventory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `FWRP`.`food_donation` ;

CREATE TABLE IF NOT EXISTS `FWRP`.`food_donation` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `food_name` VARCHAR(50) NOT NULL,
    `expiration_date` DATETIME NULL,
    `price` DECIMAL(10, 2) NULL,
    `discount` INT NULL,
    `foodtype` VARCHAR(50) NULL,
    `quantity` INT NOT NULL,
    `retailer_id` INT NOT NULL,
    CONSTRAINT FK_donation_userid FOREIGN KEY (retailer_id) REFERENCES user(id),
    PRIMARY KEY (`id`))
    ENGINE = InnoDB;
-- -----------------------------------------------------
-- Table `FWRP`.`retailer_inventory`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `FWRP`.`retailer_inventory` ;

CREATE TABLE IF NOT EXISTS `FWRP`.`retailer_inventory` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `food_name` VARCHAR(50) NOT NULL,
  `expiration_date` DATETIME NULL,
  `donated` BOOLEAN NULL,
  `claimed` BOOLEAN DEFAULT false,
  `claimed_by` INT DEFAULT NULL,
  `price` DECIMAL(10, 2) NULL,
  `discount` INT NULL,
  `foodtype` VARCHAR(50) NULL,
  `quantity` INT NOT NULL,
  `retailer_id` INT NOT NULL,
   PRIMARY KEY (`id`),
   CONSTRAINT FK_retailer_userid FOREIGN KEY (retailer_id) REFERENCES user(id)
   ON DELETE CASCADE)
      ENGINE = InnoDB;



-- -----------------------------------------------------
-- Table `FWRP`.`subscription`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `FWRP`.`subscription` ;

CREATE TABLE IF NOT EXISTS `FWRP`.`subscription` (
  `user_id` INT NOT NULL,
  `subscriber_name` VARCHAR(50) NULL,
  `email` VARCHAR(50) NULL,
  `phone` VARCHAR(50) NULL,
  `food_preference` VARCHAR(50) NULL,
  PRIMARY KEY (`user_id`),
  CONSTRAINT `fk_subscription_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `FWRP`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- Procedure to remove food from retailer_inventory, add it to organization_inventory and add it to
-- organization_claim_history

DELIMITER //
DROP PROCEDURE IF EXISTS `FWRP`.`claimFoodByOrganization`;

CREATE PROCEDURE IF NOT EXISTS `FWRP`.claimFoodByOrganization(
	food_id INT,
	organization_id_in INT,
    OUT success BOOLEAN
	)
BEGIN
	-- Declare variables to hold values
    DECLARE org_inv_id INT;
    DECLARE new_org_claim_id INT;
    DECLARE food_name_sel VARCHAR(50);
    DECLARE expiration_date_sel DATETIME;
    DECLARE price_sel DECIMAL(10, 2);
    DECLARE discount_sel INT;
    DECLARE foodtype_sel VARCHAR(50);
    DECLARE quantity_sel INT;

    -- Set variables
    SET success = FALSE;

START TRANSACTION;
-- Get the data fields from the food to insert into a new organization_inventory
SELECT food_name, expiration_date, price, discount, foodtype, quantity
INTO food_name_sel, expiration_date_sel, price_sel, discount_sel, foodtype_sel, quantity_sel
FROM retailer_inventory
WHERE id = food_id;


-- Delete the retailer inventory
DELETE FROM retailer_inventory WHERE id = food_id;

-- Insert a new item into organization_inventory
INSERT INTO organization_inventory (food_name, expiration_date, quantity, foodtype, organization_id)
VALUES (food_name_sel, expiration_date_sel, quantity_sel, foodtype_sel, organization_id_in);

-- Get the id of the inserted organization_inventory
SELECT LAST_INSERT_ID() INTO org_inv_id;

-- Check if the organization_inventory insertion was successful
IF org_inv_id IS NOT NULL THEN
		SET success = TRUE;
ELSE -- Send error message if not successful
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'organization_inventory insert was not successful';
ROLLBACK;
END IF;

    -- Insert a new item into organization_claim_history
INSERT INTO organization_claim_history (user_id, claim_org_inv_id)
VALUES (organization_id_in, org_inv_id);

SELECT LAST_INSERT_ID() INTO new_org_claim_id;

-- Check if the organization_claim insert was successful
IF new_org_claim_id IS NOT NULL THEN
		SET success = TRUE;
ELSE -- Send error message not successful
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'organization_claim insert was not successful';
ROLLBACK;
END IF;

COMMIT;


END //
DELIMITER ;


-- Procedure to remove food from retailer_inventory, add it to consumer_inventory and add it to
-- consumer_claim_history

DELIMITER //
DROP PROCEDURE IF EXISTS `FWRP`.`claimFoodByConsumer`;

CREATE PROCEDURE IF NOT EXISTS `FWRP`.claimFoodByConsumer(
	food_id INT,
	consumer_id_in INT,
    OUT success BOOLEAN
	)
BEGIN
	-- Declare variables to hold values
    DECLARE consumer_inv_id INT;
    DECLARE new_consumer_claim_id INT;
    DECLARE food_name_sel VARCHAR(50);
    DECLARE expiration_date_sel DATETIME;
    DECLARE price_sel DECIMAL(10, 2);
    DECLARE discount_sel INT;
    DECLARE foodtype_sel VARCHAR(50);
    DECLARE quantity_sel INT;

    -- Set variables
    SET success = FALSE;

START TRANSACTION;
-- Get the data fields from the food to insert into a new organization_inventory
SELECT food_name, expiration_date, price, discount, foodtype, quantity
INTO food_name_sel, expiration_date_sel, price_sel, discount_sel, foodtype_sel, quantity_sel
FROM retailer_inventory
WHERE id = food_id;


-- Delete the retailer inventory
DELETE FROM retailer_inventory WHERE id = food_id;

-- Insert a new item into organization_inventory
INSERT INTO consumers_inventory (food_name, expiration_date, quantity, foodtype, consumer_id)
VALUES (food_name_sel, expiration_date_sel, quantity_sel, foodtype_sel, consumer_id_in);

-- Get the id of the inserted organization_inventory
SELECT LAST_INSERT_ID() INTO consumer_inv_id;

-- Check if the organization_inventory insertion was successful
IF consumer_inv_id IS NOT NULL THEN
		SET success = TRUE;
ELSE -- Send error message if not successful
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'organization_inventory insert was not successful';
ROLLBACK;
END IF;

    -- Insert a new item into organization_claim_history
    -- Some typo need to be check
# INSERT INTO consumer_claim_history (user_id, claim_con_inv_id)
# VALUES (consumer_id_in, con_inventory_id);

SELECT LAST_INSERT_ID() INTO new_consumer_claim_id;

-- Check if the organization_claim insert was successful
IF new_consumer_claim_id IS NOT NULL THEN
		SET success = TRUE;
ELSE -- Send error message not successful
		SIGNAL SQLSTATE '45000'
			SET MESSAGE_TEXT = 'organization_claim insert was not successful';
ROLLBACK;
END IF;

COMMIT;


END //
DELIMITER ;