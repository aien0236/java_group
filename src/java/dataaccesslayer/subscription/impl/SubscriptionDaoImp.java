package dataaccesslayer.subscription.impl;

import dataaccesslayer.DataSource;
import model.food.Food;
import model.subscription.Subscription;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class SubscriptionDaoImp {

    private static final String URL = "jdbc:mysql://localhost:3306/database_name";
    private static final String USERNAME = "username";
    private static final String PASSWORD = "password";


    public boolean addSubscription(Subscription subscription) {
        Connection con = null;
        PreparedStatement pstmt = null;
        boolean updateState = false;
        try {
            DataSource ds = new DataSource();
            con = ds.createConnection();
            // do not insert AuthorID, it is generated by Database
            pstmt = con.prepareStatement("INSERT INTO retailer_inventory (food_name, expiration_date, flag, flagged, price, discount, foodtype, quantity, retailer_id) " +
                    "VALUES(?, ?, ?, false, ?, ?, ?, ?, ?)");
            pstmt.setString(1, subscription.getFoodName());
            pstmt.setTimestamp(2, subscription.getExpiration_date());
            pstmt.setBoolean(3, subscription.getFlag());
            pstmt.setDouble(4, subscription.getPrice());
            pstmt.setInt(5, subscription.getDiscount());
            pstmt.setString(6, subscription.getFoodtype());
            pstmt.setInt(7, subscription.getQuantity());
            pstmt.setInt(8, subscription.getUser_id());
            // execute insert
            int rowsAffected = pstmt.executeUpdate();

            // true if a row was updated, so the insert was successful
            if (rowsAffected > 0) {
                updateState = true;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
        return updateState;
    }
    //Get the food preference notification by food ID.
    public List<Food> getSubscriptionById() {
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        ArrayList<Food> foods = null;
        try {
            DataSource ds = new DataSource();
            con = ds.createConnection();
            pstmt = con.prepareStatement(
                    "SELECT id, user_id, subscriber_name, email, phone, food_preference_type, location" +
                            "FROM subscription");
            rs = pstmt.executeQuery();
            foods = new ArrayList<Food>();
            while (rs.next()) {
                Food food = new Food();
                food.setId(rs.getInt("id"));
                food.setFoodName(rs.getString("food_name"));
                food.setExpiration_date(rs.getTimestamp("expiration_date"));
                food.setFlag(rs.getBoolean("flag"));
                food.setPrice(rs.getDouble("price"));
                food.setDiscount(rs.getInt("discount"));
                food.setFoodtype(rs.getString("foodtype"));
                food.setQuantity(rs.getInt("quantity"));
                food.setUser_id(rs.getInt("retailer_id"));
                foods.add(food);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeConnection(conn);
        }
    }
    public boolean updateSubFood(Food food) {
        Connection con = null;
        PreparedStatement pstmt = null;
        boolean updateState = false;
        try {
            DataSource ds = new DataSource();
            con = ds.createConnection();
            pstmt = con.prepareStatement("UPDATE retailer_inventory SET food_name = ?, expiration_date = ?, flag = ?, flagged = ?, price = ?, discount = ?, foodtype = ?, quantity = ?, retailer_id = ? " +
                    "WHERE id = ?");
            pstmt.setString(1, food.getFoodName());
            pstmt.setTimestamp(2, food.getExpiration_date());
            pstmt.setBoolean(3, food.getFlag());
            pstmt.setBoolean(4, food.isFlagged());
            pstmt.setDouble(5, food.getPrice());
            pstmt.setInt(6, food.getDiscount());
            pstmt.setString(7, food.getFoodtype());
            pstmt.setInt(8, food.getQuantity());
            pstmt.setInt(9, food.getId());
            pstmt.setInt(10, food.getUser_id());

            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                updateState = true;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
        return updateState;
    }

    public boolean deleteSubscription(Food food) {
        Connection con = null;
        PreparedStatement pstmt = null;
        boolean donateState = false;
        try {
            DataSource ds = new DataSource();
            con = ds.createConnection();
            pstmt = con.prepareStatement("UPDATE retailer_inventory SET flagged = true " +
                    "WHERE id = ?");
            pstmt.setInt(1, food.getId());
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                donateState = true;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            try {
                if (con != null) {
                    con.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
        return donateState;
    }

}


    // Method to close the connection, which can be called by other methods.
    private void closeConnection(Connection conn) {
        if (conn != null) {
            try {
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
